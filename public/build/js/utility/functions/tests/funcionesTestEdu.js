import{RUTA_IMAGENES_USUARIOS,limpiarHtml,obtenerUrl}from"../../utilidades.js";import UI from"../../../layout/UI.js";import Visita from"../../classes/visitas/Visita.js";import Test from"../../classes/tests/Test.js";import TestBasico from"../../classes/tests/TestBasico.js";import TestMedio from"../../classes/tests/TestMedio.js";import TestAvanzado from"../../classes/tests/TestAvanzado.js";import EduTest from"./EduTest.js";import EduTestBasico from"./EduTestBasico.js";import EduTestMedio from"./EduTestMedio.js";import EduTestAvanzado from"./EduTestAvanzado.js";const asideVisible=document.querySelector("#aside-visible"),formulario=document.querySelector("#formulario-test"),nombreP=document.querySelector("#nombre-test");let categoria={},usuario={},tipoTest={},favorito={},sesion={};export let test=new Test;export let visita=new Visita;let funcionesTest=new EduTest;export async function consultarTest(){const t="/api/test?url="+obtenerUrl();try{const e=await Promise.all([fetch("/api/session"),fetch(t)]),[o,i]=e,a=await o.json(),s=await i.json();"exito"===s.tipo&&"exito"===a.tipo&&(sesion=a.session,darTipoTest(s.test))}catch(t){console.error(t)}}function darTipoTest(t){const{tipoTestId:e}=t;switch(parseInt(e)){case 1:test=new TestBasico(t),funcionesTest=new EduTestBasico;break;case 2:test=new TestMedio(t),funcionesTest=new EduTestMedio;break;case 3:test=new TestAvanzado(t),funcionesTest=new EduTestAvanzado;break;default:console.error("Hubo un error")}imprimirNombre(),consultarDatos()}async function consultarDatos(){const{categoriaId:t,usuarioId:e,tipoTestId:o,id:i}=test;try{const a="/api/categoria?id="+t,s="/api/usuario?id="+e,r="/api/tipotest?id="+o,n="/api/favorito?testId="+i,c="/api/visita?testId="+i,[d,l,m,u,p]=await Promise.all([fetch(a),fetch(s),fetch(r),fetch(n),fetch(c)]),f=await d.json(),T=await l.json(),v=await m.json(),E=await u.json(),h=await p.json();if("exito"===f.tipo&&"exito"===T.tipo&&"exito"===v.tipo&&"exito"===E.tipo&&"exito"===h.tipo){if(categoria=f.categoria,usuario=T.usuario,tipoTest=v.tipoTest,favorito=E.favorito??{},mostrarAside(),h.visita)return visita=new Visita(h.visita),void funcionesTest.mostrarInformacionTest(formulario);mostrarFormulario()}}catch(t){console.error(t)}}async function crearFavorito(){const{id:t}=test,e=new FormData;e.append("testId",t);try{const t=await fetch("/api/favorito/crear",{method:"POST",body:e}),o=await t.json();"exito"===o.tipo&&(favorito=o.favorito,mostrarAside())}catch(t){console.log(t)}}async function eliminarFavorito(){const{id:t}=favorito,e=new FormData;e.append("id",t);try{const t=await fetch("/api/favorito/eliminar",{method:"POST",body:e});"exito"===(await t.json()).tipo&&(favorito={},mostrarAside())}catch(t){console.log(t)}}async function crearVisita(){const t=new FormData,{camposExtra:e,campos:o,instruccion:i,puntuacion:a,total:s,testId:r}=visita;t.append("camposExtra",JSON.stringify(e)),t.append("campos",JSON.stringify(o)),t.append("instruccion",JSON.stringify(i)),t.append("puntuacion",a),t.append("total",s),t.append("testId",r);try{const e=await fetch("/api/visita/crear",{method:"POST",body:t}),o=await e.json();"exito"===o.tipo&&(visita.id=o.id,funcionesTest.mostrarInformacionTest(formulario))}catch(t){console.log(t)}}function imprimirNombre(){nombreP.textContent=test.nombre}function mostrarAside(){limpiarHtml(asideVisible);const{nombre:t,apellido:e,imagen:o,usuario:i}=usuario,a=document.createElement("A");a.href="/usuario/"+i,a.classList.add("autor");const s=document.createElement("IMG");s.src=`${RUTA_IMAGENES_USUARIOS}${i}/${o}`,s.width=100,s.height=100;const r=document.createElement("SPAN");r.classList.add("nombre"),r.textContent=`${t} ${e}`;const n=document.createElement("SPAN");n.classList.add("usuario"),n.textContent=i,a.appendChild(s),a.appendChild(r),a.appendChild(n);const c=document.createElement("DIV");c.classList.add("favorito",favorito.id?"activo":"inactivo"),c.onclick=t=>{añadirFavorito(t.target,favorito.id)},asideVisible.appendChild(a),asideVisible.appendChild(c);const d=document.createElement("DIV");d.classList.add("opciones");const l=document.createElement("BUTTON");l.textContent="Informacion del Test";const m=document.createElement("BUTTON");m.textContent="Como Contestar el test";const u=document.createElement("BUTTON");u.textContent="Informacion de la Categoria",l.addEventListener("click",()=>{crearModalSobreTest()}),m.addEventListener("click",()=>{crearModalTipoTest()}),u.addEventListener("click",()=>{crearModalSobreCategoria()}),d.appendChild(l),d.appendChild(m),d.appendChild(u),asideVisible.appendChild(d)}function añadirFavorito(t,e){e?eliminarFavorito(t):crearFavorito(t)}function crearModalSobreTest(){const{nombre:t,descripcion:e}=test,o=document.createElement("DIV"),i=document.createElement("H2"),a=UI.formatearDescripcion(e);i.textContent=t,o.appendChild(i),o.appendChild(a),UI.crearModal(o)}function crearModalTipoTest(){const{nombre:t,instrucciones:e}=tipoTest,o=document.createElement("DIV"),i=document.createElement("H2"),a=document.createElement("BLOCKQUOTE");i.textContent="Test tipo "+t,a.textContent=e,o.appendChild(i),o.appendChild(a),UI.crearModal(o)}function crearModalSobreCategoria(){const{nombre:t,descripcion:e}=categoria,o=document.createElement("DIV"),i=document.createElement("H2"),a=document.createElement("BLOCKQUOTE");i.textContent="Test de Categoria: "+t,a.textContent=e,o.appendChild(i),o.appendChild(a),UI.crearModal(o)}function mostrarFormulario(){if(funcionesTest.mostrarCamposExtra(formulario),funcionesTest.mostrarFormulario(formulario),parseInt(sesion.id)!==parseInt(test.usuarioId)){const t=document.createElement("BUTTON");t.textContent="Enviar",t.classList.add("boton-verde-oscuro"),t.type="submit",formulario.appendChild(t),formulario.onsubmit=t=>{t.preventDefault(),validarFormulario()}}}function validarFormulario(){const{campos:t,camposExtra:e}=visita,o=e.filter(t=>""===t.valor||0===t.valor.length),i=t.filter(t=>!t.multiple&&!t.valor.id||t.multiple&&0===t.valor.length);if(i.length>0||o.length>0)return UI.mostrarAlerta("Todos Los Campos Son Obligatorios",formulario),void funcionesTest.mostrarAlertasCampos([...o,...i],formulario);const a=t.filter(t=>!t.multiple),s=t.filter(t=>t.multiple),r=a.reduce((t,{valor:e})=>t+parseInt(e.valor),0),n=s.reduce((t,{valor:e})=>t+e.reduce((t,{valor:e})=>t+parseInt(e),0),0);visita.puntuacion=r+n,visita.total=test.calcularMinimoYMaximo().maximo;const{id:c,instrucciones:d}=test,[l]=d.filter(({minimo:t,maximo:e})=>parseInt(visita.puntuacion)>=parseInt(t)&&parseInt(visita.puntuacion)<=parseInt(e));visita.instruccion=l,visita.testId=c,crearVisita()}